-- -------------------------------------------------------------
-- 
-- File Name: Generated HDL Code\BiSS_Splitter_Rev8\Buffer_rsvd.vhd
-- Created: 2020-09-09 16:25:01
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Buffer_rsvd
-- Source Path: BiSS_Splitter_Rev8/Buffer
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Buffer_rsvd IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        DAQ_Read_Request                  :   IN    std_logic;
        DAQ_Read_Clock                    :   IN    std_logic;
        Write_Clock                       :   IN    std_logic;
        Error_rsvd                        :   IN    std_logic;
        Write_In                          :   IN    std_logic;
        Bit_Number_In                     :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        Write_Request                     :   IN    std_logic;
        Motor_Read_Clock                  :   IN    std_logic;
        Motor_Read_Request                :   IN    std_logic;
        DAQ_Read_Out                      :   OUT   std_logic;
        DAQ_Read_Done                     :   OUT   std_logic;
        Motor_Read_Out                    :   OUT   std_logic;
        Motor_Read_Done                   :   OUT   std_logic
        );
END Buffer_rsvd;


ARCHITECTURE rtl OF Buffer_rsvd IS

  -- Component Declarations
  COMPONENT Chart
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          detected_error                  :   IN    std_logic;
          clock                           :   IN    std_logic;
          bit_in                          :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          motor_rClock                    :   IN    std_logic;
          motor_rRequest                  :   IN    std_logic;
          DAQ_rClock                      :   IN    std_logic;
          DAQ_rRequest                    :   IN    std_logic;
          write_Request                   :   IN    std_logic;
          write_ad                        :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          write_en                        :   OUT   std_logic;
          read_ad                         :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          DAQ_outEn                       :   OUT   std_logic;
          motor_outEn                     :   OUT   std_logic;
          DAQ_done                        :   OUT   std_logic;
          motor_done                      :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT SimpleDualPortRAM_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          wr_din                          :   IN    std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          rd_dout                         :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Chart
    USE ENTITY work.Chart(rtl);

  FOR ALL : SimpleDualPortRAM_generic
    USE ENTITY work.SimpleDualPortRAM_generic(rtl);

  -- Signals
  SIGNAL write_ad                         : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL write_en                         : std_logic;
  SIGNAL read_ad                          : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL DAQ_outEn                        : std_logic;
  SIGNAL motor_outEn                      : std_logic;
  SIGNAL DAQ_done                         : std_logic;
  SIGNAL motor_done                       : std_logic;
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL Constant_out1                    : std_logic;
  SIGNAL Data_Type_Conversion1_out1       : signed(7 DOWNTO 0);  -- int8
  SIGNAL Buffer_Read_Out                  : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL Buffer_Read_Out_signed           : signed(7 DOWNTO 0);  -- int8
  SIGNAL Data_Type_Conversion2_out1       : std_logic;
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL Constant1_out1                   : std_logic;

BEGIN
  u_Chart : Chart
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              detected_error => Error_rsvd,
              clock => Write_Clock,
              bit_in => Bit_Number_In,  -- uint8
              motor_rClock => Motor_Read_Clock,
              motor_rRequest => Motor_Read_Request,
              DAQ_rClock => DAQ_Read_Clock,
              DAQ_rRequest => DAQ_Read_Request,
              write_Request => Write_Request,
              write_ad => write_ad,  -- uint8
              write_en => write_en,
              read_ad => read_ad,  -- uint8
              DAQ_outEn => DAQ_outEn,
              motor_outEn => motor_outEn,
              DAQ_done => DAQ_done,
              motor_done => motor_done
              );

  u_Simple_Dual_Port_RAM : SimpleDualPortRAM_generic
    GENERIC MAP( AddrWidth => 8,
                 DataWidth => 8
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => std_logic_vector(Data_Type_Conversion1_out1),
              wr_addr => write_ad,
              wr_en => write_en,
              rd_addr => read_ad,
              rd_dout => Buffer_Read_Out
              );

  
  switch_compare_1 <= '1' WHEN DAQ_outEn > '0' ELSE
      '0';

  Constant_out1 <= '1';

  Data_Type_Conversion1_out1 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & Write_In;

  Buffer_Read_Out_signed <= signed(Buffer_Read_Out);

  
  Data_Type_Conversion2_out1 <= '1' WHEN Buffer_Read_Out_signed /= to_signed(16#00#, 8) ELSE
      '0';

  
  DAQ_Read_Out <= Constant_out1 WHEN switch_compare_1 = '0' ELSE
      Data_Type_Conversion2_out1;

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay1_out1 <= DAQ_done;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  
  switch_compare_1_1 <= '1' WHEN motor_outEn > '0' ELSE
      '0';

  Constant1_out1 <= '1';

  
  Motor_Read_Out <= Constant1_out1 WHEN switch_compare_1_1 = '0' ELSE
      Data_Type_Conversion2_out1;

  DAQ_Read_Done <= Delay1_out1;

  Motor_Read_Done <= motor_done;

END rtl;

